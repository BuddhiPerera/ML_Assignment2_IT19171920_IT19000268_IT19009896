# -*- coding: utf-8 -*-
"""IT19009896.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1-SznllXDpZ1kpAlckKtxez3p_vofLM62

**Randomforest Classification for Brest Cancer Prediction**
"""

# Importing all the neccessary libraries
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

# Import and Read the data set
data_frame = pd.read_csv('/content/data')

"""**Data Analyzing**"""

# Display the first ten rows of data set
data_frame.head(10)

# Check the total number of rows and columns available in the data set
data_frame.shape

# Get a summary of the Data Set
data_frame.info()

# Remove the columns with null values
data_frame = data_frame.dropna(axis = 1)

# Again checking the total number of rows and columns NOW available in the data set
data_frame.shape

"""**Data Visualization**"""

# Get the unique values available in the column 'Diagnosis'
data_frame['diagnosis'].value_counts()

# Draw a countplot to visualize the diagnosis in a chart
sns.countplot(data_frame['diagnosis'], label = 'count')

# Encoding and converting categorical data into numerical data 
# Import the necessary library
from sklearn.preprocessing import LabelEncoder
labelencoder_of_Y = LabelEncoder()

# Transforming the categorical data into numerical data
# The 'diagnosis' column data
data_frame.iloc[:,1] = labelencoder_of_Y.fit_transform(data_frame.iloc[:,1].values)

# Display the transformed column values
# The 'diagnosis' column data
data_frame.iloc[:,1].values

# Draw a pair plot to display the X and Y relationship which is the M and B cells relationship
sns.pairplot(data_frame.iloc[:,1:7], hue = 'diagnosis')

# Draw a Heat Map to display the correlation of the columns
plt.figure(figsize = (15,15))
sns.heatmap(data_frame.iloc[:,1:11].corr(), cmap='coolwarm', annot=True)

"""**Feature Scaling**"""

# Define the Independent and Dependent data sets
X = data_frame.iloc[:,2:31,].values
Y = data_frame.iloc[:,1].values

# Split the testing and training data sets into 80:20 ratio
# Import the necessary library
from sklearn.model_selection import train_test_split

X_train_set, X_test_set, Y_train_set, Y_test_set = train_test_split(X, Y, test_size = 0.20, random_state = 0)

# Fit the data set into standard scaler
# Import the necessary library
from sklearn.preprocessing import StandardScaler 

standard_scaler = StandardScaler()

X_train_set = standard_scaler.fit_transform(X_train_set)
X_test_set = standard_scaler.fit_transform(X_test_set)

"""**Random Forest Model Implementation**"""

def random_forest_model(X_train_set, Y_train_set):
  # Import the library
  from sklearn.ensemble import RandomForestClassifier

  random_forest = RandomForestClassifier(n_estimators = 10, criterion = 'entropy', random_state = 0)
  random_forest.fit(X_train_set, Y_train_set)

  # print the accuracy of the model
  print('The accuracy of Random Forest Model is: ', random_forest.score(X_train_set, Y_train_set))

  return random_forest

# Call the model and get the accuracy
random_forest_result = random_forest_model(X_train_set, Y_train_set)

# Get the summary of classification report
# Import the libraries
from sklearn.metrics import classification_report
from sklearn.metrics import accuracy_score

print(classification_report(Y_test_set, random_forest_result.predict(X_test_set)))
print(accuracy_score(Y_test_set, random_forest_result.predict(X_test_set)))

"""**Prediction**"""

prediction_of_breast_cancer = random_forest_result.predict(X_test_set)
print('Prediction of having a Breast Cancer is : ', prediction_of_breast_cancer)
print('Actual Prediction of having a Breast Cancer is : ', Y_test_set)