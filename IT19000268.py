# -*- coding: utf-8 -*-
"""LOGISTIC REGRESSION / ML ASSIGNMENT 2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1NVZ6t4_H2WZoGWUIypisOLOVtAjCeH9B
"""

#import modules
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

#upload file from the device
from google.colab import files
uploaded = files.upload()

#read the file
import io
ls = pd.read_csv(io.BytesIO(uploaded['data.csv']))

#check the first five rows of the data set
ls.head()

#check the shape of the data set
ls.shape

#check for null values
ls.isnull().sum()

#remove the column containing null values
ls = ls.dropna(axis = 1)

#check the data set again after removing the column
ls.shape

#check the count of the dignosis
sns.countplot(ls['diagnosis'], label = 'count')

#to convert categorical to numericals
from sklearn.preprocessing import LabelEncoder
labelencoder_Y = LabelEncoder()

#fit transform fits the level encoder and gives the transformed level
ls.iloc[:,1] = labelencoder_Y.fit_transform(ls.iloc[:,1].values)

ls.iloc[:,1].values

#comparing the diagnosis
#pairplot showa a pair wise relation

sns.pairplot(ls.iloc[:,1:7], hue='diagnosis')

#correlation between columns
df.iloc[:,1:11].corr()

#separating dependent and independent data sets

X = ls.iloc[:, 2:31].values
y = ls.iloc[:,:1].values

#split the data to train and test to 80:20 ration
from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, random_state = 0)

from sklearn.preprocessing import StandardScaler
sc = StandardScaler ()
X_train  = sc.fit_transform(X_train)
X_test  = sc.fit_transform(X_test)

#train the data set using logistic regression
#for that import logistic regression algorithm from sklearn

def models(X_train, y_train):
  from sklearn.linear_model import LogisticRegression
  dataset = LogisticRegression(random_state = 0)
  dataset.fit(X_train, y_train)

#print the accuracy of logistic algorithm
  print('accuracy of Logistic Regression:', dataset.score(X_train, y_train))

#return the accuracy of logistic algorithm on this data set
  return dataset

accuracy = models(X_train, y_train)

"""Accuracy of the data set using logistic regression is 0.9978021978021978. After comparing the accuracies of other algorithms, best algorthm will be selected and data set will be trained using that algorithm."""